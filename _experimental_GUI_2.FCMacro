from PySide import QtGui, QtCore
import FreeCAD,FreeCADGui,Part, os
import re
import Mesh

from PySide.QtCore import QSettings

# CHANGE THE LINE BELOW
path_to_ui = ".\\ui\\dialog.ui"

class OpenEMS:
	def getOpenEMSObjects():
		currentObjects = App.ActiveDocument.Objects
		
		objToExport = []
		
		for obj in currentObjects:
			if (re.search('openEMS', obj.Label)):
				objToExport.append(obj)
	
		return objToExport

	def getAllObjects():
		currentObjects = App.ActiveDocument.Objects	
		objList = []
		for obj in currentObjects:
			item = QtGui.QTreeWidgetItem([obj.Label])
			item.setIcon(0, QtGui.QIcon(".\\img\\object.png")) 
			objList.append(item)
		return objList

# parent class for following settings items, it contains all function common for all classes
#
class SettingsItem:

	# initializer
	def serializeToString(self, name = "", type = ""):
		self.name = name
		self.type = type
		return "{}"

	# basic type property common for all kind of settings
	def getType(self):
		return self.type

	# basic type property common for all kind of settings
	def getName(self):
		return self.name

# FreeCAD part object
#
class FreeCADSettingsItem(SettingsItem):
	def __init__(self, name = "", type = "FreeCADSettingItem"):
		self.name = name
		self.type = type
		return

	def serializeToString(self):
		serializedString = "{'name': '" + self.name #+ "', 'type': '
		serializedString += "}"
		return serializedString

# Grid settings
#	Fixed Count    - fixed number per axes
#	Fixed Distance - gridlines have fixed distance between them
#	User Defined   - user has to provide coordinates where lines should be
#
class GridSettingsItem(SettingsItem):
	def __init__(self, name = "", type = "", fixedCount = {'x':0, 'y':0, 'z':0}, fixedDistance = {'x':0, 'y':0, 'z':0, 'units':''}, userDefined = {'data':"", 'units':"mm"}):
		self.name = name
		self.type = type
		self.fixedCount = fixedCount
		self.fixedDistance = fixedDistance
		self.userDefined = userDefined

	def serializeToString(self):
		serializedString = "{'name': '" + self.name + "', 'type': '" + self.type + "', 'def': "
		if (self.type == "Fixed Count"):
			serializedString += str(self.fixedCount)
		if (self.type == "Fixed Distance"):
			serializedString += str(self.fixedDistance)
		if (self.type == "User Defined"):
			serializedString += "'" + str(self.userDefined) + "'"
		serializedString += "}"
		return serializedString

	#Return xyz distances, count or user defined array based what user asked for.
	def getXYZ(self):
		if (self.type == "Fixed Count"):
			return self.fixedCount
		if (self.type == "Fixed Distance"):
			return self.fixedDistance
		if (self.type == "User Defined"):
			return self.userDefined
	
	def getUnitAsScriptLine(self):
		if (self.type == "Fixed Distance"):
			if (self.fixedDistance['units'] == 'm'):
				return "1e0"
			elif (self.fixedDistance['units'] == 'cm'):
				return "1e-2"
			elif (self.fixedDistance['units'] == 'mm'):
				return "1e-3"
			elif (self.fixedDistance['units'] == 'um'):
				return "1e-6"
			elif (self.fixedDistance['units'] == 'nm'):
				return "1e-9"
			elif (self.fixedDistance['units'] == 'pm'):
				return "1e-12"
		else:
			pass

		return "/* unknown unit */"

# Material settings, basic are epsilon and mue, kappa and sigma are extended
#	epsilon - permitivity
#	mue     - permeability
#	kappa   - susceptibility, coupling coeficient
#	sigma   - VSWR, coductivity, surface charfe
#
class MaterialSettingsItem(SettingsItem):
	def __init__(self, name = "", type = "", constants = {'epsilon':1.0, 'mue':1.0, 'kappa':0.0, 'sigma': 0.0}):
		self.name = name
		self.type = type
		self.constants = constants

	def serializeToString(self):
		serializedString = "{'name': '" + self.name
		serializedString += ", 'epsilon': " + str(self.constants['epsilon'])
		serializedString += ", 'mue': " + str(self.constants['mue'])
		serializedString += ", 'kappa': " + str(self.constants['kappa'])
		serializedString += ", 'sigma': " + str(self.constants['sigma'])
		serializedString += "}"
		return serializedString

# Excitation settings, for input power where energy is floating into model
#	Sinusodial - input port is excitated by sinusodial electric field
#	Gaussian   - gaussian impulse at input port
#	Custom     - user has to define function of electric field at input port
#
class ExcitationSettingsItem(SettingsItem):
	def __init__(self, name = "", type = "", sinusodial = {'fc': 0}, gaussian = {'f0': 0, 'fc': 0}, custom = {'functionStr': '0'}, units = "Hz"):
		SettingsItem.__init__(self)
		self.name = name
		self.type = type
		self.sinusodial = sinusodial
		self.gaussian = gaussian
		self.custom = custom
		self.units = units
		return

	def serializeToString(self):
		serializedString = "{'name': '" + self.name + "', "
		serializedString += "'type': '" + self.type + "', "
		if (self.type == "sinusodial"):
			serializedString += "'fc': '" + str(self.sinusodial['fc']) + "', "
		if (self.type == "gaussian"):
			serializedString += "'f0': '" + str(self.gaussian['f0']) + "', 'fc': '" + str(self.gaussian['fc']) + "' "
		if (self.type == "custom"):
			serializedString += "'f': '" + str(self.custom['functionStr']) + "' "

		serializedString += "'units': \"" + self.units + "\""
		serializedString += "}"
		return serializedString

	def getType(self):
		return self.type

# Port settings
#	There are just few ports typoe of ports defined in OpenEMS:
#		- lumped
#		- microstrip
#		- circular waveguide
#		- rectangular waveguide
class PortSettingsItem(SettingsItem):
	def __init__(self, name = "", type = ""):
		self.name = name
		self.type = type
		return

	def serializeToString(self):
		serializedString = "{'name': '" + self.name
		if (self.type == "lumped"):
			serializedString += ", 'type': 'lumped'"
		if (self.type == "microstrip"):
			serializedString += ", 'type': 'microstrip'"
		if (self.type == "circular waveguide"):
			serializedString += ", 'type': 'circular waveguide'"
		if (self.type == "rectangular waveguide"):
			serializedString += ", 'type': 'rectangular waveguide'"
		serializedString += "}"
		return serializedString

#
# Main GUI panel class
#
class BoxTaskPanel:
	def __init__(self):
		#
		# Change current path to script file folder
		#
		abspath = os.path.abspath(__file__)
		dname = os.path.dirname(abspath)
		os.chdir(dname)

		# this will create a Qt widget from our ui file
		self.form = FreeCADGui.PySideUic.loadUi(path_to_ui)

		#
		# TOP LEVEL ITEMS (excitation, grid, materials, ...)
		#

		#
		# Default items for each section
		#
		topItem = self.form.objectAssignmentRightTreeWidget.itemAt(0,0)
		defaultMaterialItem = QtGui.QTreeWidgetItem(["Material Default"])
		defaultExcitationItem = QtGui.QTreeWidgetItem(["Excitation Default"])
		defaultGridItem = QtGui.QTreeWidgetItem(["Grid Default"])
		defaultPortItem = QtGui.QTreeWidgetItem(["Port Default"])

		#
		# Default items in each subsection have user data FreeCADSttingsItem classes to have just basic information like genereal freecad object
		#
		defaultMaterialItem.setData(0, QtCore.Qt.UserRole, FreeCADSettingsItem("Material Default"))
		defaultExcitationItem.setData(0, QtCore.Qt.UserRole, FreeCADSettingsItem("Excitation Default"))
		defaultGridItem.setData(0, QtCore.Qt.UserRole, FreeCADSettingsItem("Grid Default"))
		defaultPortItem.setData(0, QtCore.Qt.UserRole, FreeCADSettingsItem("Port Default"))

		# MATERIALS
		topItem = QtGui.QTreeWidgetItem(["Materials"])
		topItem.setIcon(0, QtGui.QIcon(".\\img\\material.png"))
		topItem.addChildren([defaultMaterialItem])
		self.form.objectAssignmentRightTreeWidget.insertTopLevelItem(0, topItem)

		#LuboJ
		self.MaterialsItem = topItem	#aux item materials item to have some reference here to be sure for future acces it

		# EXCITATION
		topItem = QtGui.QTreeWidgetItem(["Excitation"])
		topItem.setIcon(0, QtGui.QIcon(".\\img\\bulb.png"))
		topItem.addChildren([defaultExcitationItem])
		self.form.objectAssignmentRightTreeWidget.insertTopLevelItem(0, topItem)

		# GRID
		topItem = QtGui.QTreeWidgetItem(["Grid"])
		topItem.setIcon(0, QtGui.QIcon(".\\img\\grid.png"))
		topItem.addChildren([defaultGridItem])
		self.form.objectAssignmentRightTreeWidget.insertTopLevelItem(0, topItem)

		# PORTS
		topItem = QtGui.QTreeWidgetItem(["Ports"])
		topItem.setIcon(0, QtGui.QIcon(".\\img\\port.png"))
		topItem.addChildren([defaultPortItem])
		self.form.objectAssignmentRightTreeWidget.insertTopLevelItem(0, topItem)

		#select first item
		self.form.objectAssignmentRightTreeWidget.setCurrentItem(topItem)

		self.form.moveLeftButton.clicked.connect(self.onMoveLeft)
		self.form.moveRightButton.clicked.connect(self.onMoveRight)

		#########################################################################################################
		#	Left Column FreeCAD objects added in list
		#########################################################################################################

		"""		
		itemsLabels = OpenEMS.getAllObjects()
		for label in itemsLabels:
			topItem = QtGui.QTreeWidgetItem([label])
			itemData = FreeCADSettingsItem(label)
			topItem.setData(0, QtCore.Qt.UserRole, itemData)
			self.form.objectAssignmentLeftTreeWidget.insertTopLevelItem(0, topItem)
		"""

		items = OpenEMS.getOpenEMSObjects()
		treeItems = []
		for i in items:
			print("openEMS object to export:" + i.Label)

			# FIRST METHOD raw including just labeled items
			#
			#item = QtGui.QTreeWidgetItem([i.Label])
			#item.setIcon(0, QtGui.QIcon(".\\img\\object.png"))
			#treeItems.append(item)

			# ADDING ITEMS with UserData object which storethem in intelligent way
			#
			topItem = QtGui.QTreeWidgetItem([i.Label])
			itemData = FreeCADSettingsItem(i.Label)
			topItem.setData(0, QtCore.Qt.UserRole, itemData)
			topItem.setIcon(0, QtGui.QIcon(".\\img\\object.png"))
			treeItems.append(topItem)
		
		self.form.objectAssignmentLeftTreeWidget.insertTopLevelItems(0, treeItems)

		#select first item
		#if (len(itemsLabels) > 0):
		#	self.form.objectAssignmentLeftTreeWidget.setCurrentItem(itemsLabels[0])

		#########################################################################################################
		#########################################################################################################
		#########################################################################################################

		#
		# SETTINGS FOR BUTTONS CLICK, functions assignements
		#
		self.form.gridSettingsAddButton.clicked.connect(self.gridSettingsAddButtonClicked)
		self.form.gridSettingsRemoveButton.clicked.connect(self.gridSettingsRemoveButtonClicked)

		self.form.materialSettingsAddButton.clicked.connect(self.materialSettingsAddButtonClicked)
		self.form.materialSettingsRemoveButton.clicked.connect(self.materialSettingsRemoveButtonClicked)

		self.form.excitationSettingsAddButton.clicked.connect(self.excitationSettingsAddButtonClicked)
		self.form.excitationSettingsRemoveButton.clicked.connect(self.excitationSettingsRemoveButtonClicked)

		self.form.portSettingsAddButton.clicked.connect(self.portSettingsAddButtonClicked)
		self.form.portSettingsRemoveButton.clicked.connect(self.portSettingsRemoveButtonClicked)

		#
		# Handle function for grid radio buttons click
		#
		self.form.userDefinedRadioButton.clicked.connect(self.userDefinedRadioButtonClicked)
		self.form.fixedCountRadioButton.clicked.connect(self.fixedCountRadioButtonClicked)
		self.form.fixedDistanceRadioButton.clicked.connect(self.fixedDistanceRadioButtonClicked)

		#
		# Clicked on "Generate OpenEMS Script"
		#		
		self.form.generateOpenEMSScriptButton.clicked.connect(self.generateOpenEMSScriptButtonClicked)

		#
		# Material item changed.
		#		
		self.form.materialSettingsTreeView.currentItemChanged.connect(self.materialTreeWidgetItemChanged)	

		####################################################################################################
		# GUI SAVE/LOAD from file
		####################################################################################################
		self.form.saveCurrentSettingsButton.clicked.connect(self.saveCurrentSettingsButtonClicked)
		self.form.loadCurrentSettingsButton.clicked.connect(self.loadCurrentSettingsButtonClicked)

	def saveCurrentSettingsButtonClicked(self):
		print("objectAssignmentShowSettingsButtonClicked entered")

		#get reference to each category item
		allItems = []
		allItems.append(self.form.objectAssignmentRightTreeWidget.findItems("Materials", QtCore.Qt.MatchExactly)[0])
		allItems.append(self.form.objectAssignmentRightTreeWidget.findItems("Grid", QtCore.Qt.MatchExactly)[0])
		allItems.append(self.form.objectAssignmentRightTreeWidget.findItems("Excitation", QtCore.Qt.MatchExactly)[0])
		allItems.append(self.form.objectAssignmentRightTreeWidget.findItems("Ports", QtCore.Qt.MatchExactly)[0])

		#go through categories children
		#output their data inside
		for m in range(len(allItems)):
			currItem = allItems[m]
			for k in range(currItem.childCount()):
				item = currItem.child(k)
				itemData = item.data(0, QtCore.Qt.UserRole)
				print("User datatype: " + item.text(0) + " - " + str(type(itemData)))
				if (itemData):
					print(itemData.serializeToString())

		return

	def getSimParamsUnitsStr(self):
		units = self.form.simParamsUnitsNumberInput.currentText()
		if (units == 'Hz'):
			units2 = ''
			pass
		elif(units == "kHz"):
			units2 = 'e3'
			pass
		elif(units == "MHz"):
			units2 = 'e6'
			pass
		elif(units == "GHz"):
			units2 = 'e9'
			pass
		return units2

	def getSimParamsFcStr(self):
		units = self.getSimParamsUnitsStr()
		return str(self.form.simParamFcNumberInput.value()) + units

	def getSimParamsF0Str(self):
		units = self.getSimParamsUnitsStr()
		return str(self.form.simParamF0NumberInput.value()) + units

	#########################################################################################################################
	#                                  _                       _       _          _ _      _            _ 
	#                                 | |                     (_)     | |        | (_)    | |          | |
	#   __ _  ___ _ __   ___ _ __ __ _| |_ ___   ___  ___ _ __ _ _ __ | |_    ___| |_  ___| | _____  __| |
	#  / _` |/ _ \ '_ \ / _ \ '__/ _` | __/ _ \ / __|/ __| '__| | '_ \| __|  / __| | |/ __| |/ / _ \/ _` |
	# | (_| |  __/ | | |  __/ | | (_| | ||  __/ \__ \ (__| |  | | |_) | |_  | (__| | | (__|   <  __/ (_| |
	#  \__, |\___|_| |_|\___|_|  \__,_|\__\___| |___/\___|_|  |_| .__/ \__|  \___|_|_|\___|_|\_\___|\__,_|
	#   __/ |                                                   | |                                       
	#  |___/                    
	#
	#	GENERATE SCRIPT CLICKED
	#
	def generateOpenEMSScriptButtonClicked(self):
		print("generateOpenEMSScriptButtonClicked() Hello.")

		#get reference to each category item
		#
		# HERE IS ORDER IN WHICH LIST WILL BE EXECUTED AND ITEMS WILL BE TRANSLATED STEP BY STEP based on their type
		#
		allItems = []
		allItems.append(self.form.objectAssignmentRightTreeWidget.findItems("Materials", QtCore.Qt.MatchExactly)[0])
		allItems.append(self.form.objectAssignmentRightTreeWidget.findItems("Grid", QtCore.Qt.MatchExactly)[0])
		allItems.append(self.form.objectAssignmentRightTreeWidget.findItems("Excitation", QtCore.Qt.MatchExactly)[0])
		allItems.append(self.form.objectAssignmentRightTreeWidget.findItems("Ports", QtCore.Qt.MatchExactly)[0])

		#go through categories children, output their data inside
		"""
		for m in range(len(allItems)):
			currItem = allItems[m]
			for k in range(currItem.childCount()):
				item = currItem.child(k)
				itemData = item.data(0, QtCore.Qt.UserRole)
				print("User datatype: " + item.text(0) + " - " + str(type(itemData)))
				if (itemData):
					print(itemData.serializeToString())
		"""

		# GENERATE OCTAVE SCRIPT FOR OPENEMS item by item
		genScript = ''

		#
		# Generating script beginning
		#
		genScript += "% EXAMPLE / circular polarized patch antenna\n"
		genScript += "%\n"
		genScript += "% This example demonstrates how to:\n"
		genScript += "%  - calculate the reflection coefficient of a circular polarized patch antenna\n"
		genScript += "%\n"
		genScript += "% 2020 Lubomir Jagos\n"
		genScript += "\n"
		genScript += "close all\n"
		genScript += "clear\n"
		genScript += "clc\n"
		genScript += "\n"
		genScript += "%% switches & options...\n"
		genScript += "postprocessing_only = 0;\n"
		genScript += "draw_3d_pattern = 0; % this may take a while...\n"
		genScript += "use_pml = 0;         % use pml boundaries instead of mur\n"
		genScript += "\n"
		genScript += "currDir = strrep(pwd(), '\', '\\');\n"
		genScript += "\n"
		genScript += "%LuboJ, JUST TO SEE RESULT\n"
		genScript += "%openEMS_opts = '--no-simulation';\n"
		genScript += "%openEMS_opts = '--debug-PEC --no-simulation';\n"
		genScript += "openEMS_opts = '';\n"
		genScript += "\n"




		#
		# IMPORTANT
		#
		genScript += "%% setup the simulation\n"
		genScript += "physical_constants;\n"
		genScript += "unit = 1e-3; % all length in mm\n"






		genScript += "\n"
		genScript += "%% prepare simulation folder\n"
		genScript += "Sim_Path = 'tmp';\n"
		genScript += "Sim_CSX = 'wiklinson.xml';\n"
		genScript += "[status, message, messageid] = rmdir( Sim_Path, 's' ); % clear previous directory\n"
		genScript += "[status, message, messageid] = mkdir( Sim_Path ); % create empty simulation folder\n"
		genScript += "\n"
		genScript += "%% setup FDTD parameter & excitation function\n"




		#
		# IMPORTANT, OK!
		#
		genScript += "max_timesteps = " + str(self.form.simParamsMaxTimesteps.value())  + ";\n"
		genScript += "min_decrement = " + str(self.form.simParamsMinDecrement.value()) + "; % equivalent to -50 dB\n"





		#
		# IMPORTANT, OK!
		#
		genScript += "f0 = " + self.getSimParamsF0Str() + "; % center frequency\n"
		genScript += "fc = " + self.getSimParamsFcStr() + "; % 20 dB corner frequency\n"



		genScript += "FDTD = InitFDTD( 'NrTS', max_timesteps, 'EndCriteria', min_decrement );\n"
		genScript += "\n"
		genScript += "FDTD = SetGaussExcite( FDTD, f0, fc );\n"
		genScript += "%FDTD = SetSinusExcite(FDTD,f0); %LuboJ try sinus excitation\n"
		genScript += "\n"
		genScript += "BC = {'MUR' 'MUR' 'MUR' 'MUR' 'MUR' 'MUR'}; % boundary conditions\n"
		genScript += "if (use_pml>0)\n"
		genScript += "    BC = {'PML_8' 'PML_8' 'PML_8' 'PML_8' 'PML_8' 'PML_8'}; % use pml instead of mur\n"
		genScript += "end\n"
		genScript += "FDTD = SetBoundaryCond( FDTD, BC );\n"
		genScript += "\n"
		genScript += "%% setup CSXCAD geometry & mesh\n"
		genScript += "% currently, openEMS cannot automatically generate a mesh\n"






		#
		# IMPORTANT
		#
		genScript += "max_res = c0 / (f0+fc) / unit / 20; % cell size: lambda/20\n"



		genScript += "\n"
		genScript += "CSX = InitCSX();\n"
		genScript += "\n"
		genScript += "\n"

		# GENERATE OCTAVE SCRIPT FOR OPENEMS item by item
		portList = []																					# <------------ PORT LIST

		print("======================== REPORT BEGIN ========================\n")
		for m in range(len(allItems)):
			currItem = allItems[m]
			for k in range(currItem.childCount()):
				item = currItem.child(k)
				itemData = item.data(0, QtCore.Qt.UserRole)
				if (itemData):
					#
					#	EXCITATION
					#  ________   _______ _____ _______    _______ _____ ____  _   _                                   _           _                 _      
					# |  ____\ \ / / ____|_   _|__   __|/\|__   __|_   _/ __ \| \ | |                                 | |         | |               | |     
					# | |__   \ V / |      | |    | |  /  \  | |    | || |  | |  \| |   __ _  ___ _ __   ___ _ __ __ _| |_ ___  __| |   ___ ___   __| | ___ 
					# |  __|   > <| |      | |    | | / /\ \ | |    | || |  | | . ` |  / _` |/ _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |  / __/ _ \ / _` |/ _ \
					# | |____ / . \ |____ _| |_   | |/ ____ \| |   _| || |__| | |\  | | (_| |  __/ | | |  __/ | | (_| | ||  __/ (_| | | (_| (_) | (_| |  __/
					# |______/_/ \_\_____|_____|  |_/_/    \_\_|  |_____\____/|_| \_|  \__, |\___|_| |_|\___|_|  \__,_|\__\___|\__,_|  \___\___/ \__,_|\___|
					#                                                                   __/ |                                                               
					#                                                                  |___/                                                                
					if (itemData.__class__.__name__ is "ExcitationSettingsItem"):
						print("Excitation Settings detected")
						currSetting = item.data(0, QtCore.Qt.UserRole)
						print("#")
						print("#EXCITATION")
						if (currSetting.getName() != 'Excitation Default'):
							print("#name: " + currSetting.getName())
							print("#type: " + currSetting.getType())

							portName = "port_" + str(100*m+k)
							genScript += "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
							genScript += "% EXCITATION\n"
							genScript += "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
							genScript += "CSX = AddDump( CSX, '" + portName + "', 'DumpType', 0, 'DumpMode', 2); % cell interpolated\n"

							objs = FreeCAD.ActiveDocument.Objects

							for k in range(item.childCount()):
								childName = item.child(k).text(0)
								print("##Children:")
								print("\t" + childName)
								freecadObjects = [i for i in objs if (i.Label) == childName] 

								#print(freecadObjects)
								for obj in freecadObjects:
									bbCoords = obj.Shape.BoundBox

									print('\t--> Xlength: ' + str(bbCoords.XLength))
									print('\t--> Ylength: ' + str(bbCoords.YLength))
									print('\t--> Zlength: ' + str(bbCoords.ZLength))
									print('\t--> XMin: ' + str(bbCoords.XMin) + " XMax: " + str(bbCoords.XMax))
									print('\t--> YMin: ' + str(bbCoords.YMin) + " YMax: " + str(bbCoords.YMax))
									print('\t--> ZMin: ' + str(bbCoords.ZMin) + " ZMax: " + str(bbCoords.ZMax))

									#
									# EXCITATION openEMS GENERATION INTO VARIABLE
									#
									if (currSetting.getType() == 'sinusodial'):
										genScript += "/* sinusodial */\n"
										# TBD
										#genScript += "start = [substrate.start.x substrate.start.y 1];\n"
										#genScript += "stop  = [substrate.end.x  substrate.end.y 1];\n"
										genScript += "\n"
										pass
									elif (currSetting.getType() == 'gaussian'):
										genScript += "/* gaussian */\n"
										# TBD
										#genScript += "start = [substrate.start.x substrate.start.y 1];\n"
										#genScript += "stop  = [substrate.end.x  substrate.end.y 1];\n"
										genScript += "\n"
										pass
									elif (currSetting.getType() == 'custom'):
										genScript += "/* custom */\n"
										# TBD
										#genScript += "start = [substrate.start.x substrate.start.y 1];\n"
										#genScript += "stop  = [substrate.end.x  substrate.end.y 1];\n"
										genScript += "\n"
										pass

							genScript += "CSX = AddBox( CSX, '" + portName + "', 0, start, stop );\n"
							portList.append(portName)

							pass
						else:
							print("#Excitation Default")
							print("---")
							pass
						pass

					#
					#	PORT
					#  ____    ____  _____ _______                                   _           _                 _      
					# |  __ \ / __ \|  __ \__   __|                                 | |         | |               | |     
					# | |__) | |  | | |__) | | |      __ _  ___ _ __   ___ _ __ __ _| |_ ___  __| |   ___ ___   __| | ___ 
					# |  ___/| |  | |  _  /  | |     / _` |/ _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |  / __/ _ \ / _` |/ _ \
					# | |    | |__| | | \ \  | |    | (_| |  __/ | | |  __/ | | (_| | ||  __/ (_| | | (_| (_) | (_| |  __/
					# |_|     \____/|_|  \_\ |_|     \__, |\___|_| |_|\___|_|  \__,_|\__\___|\__,_|  \___\___/ \__,_|\___|
					#                                 __/ |                                                               
					#                                |___/                                                                
					#
					elif (itemData.__class__.__name__ is "PortSettingsItem"):
						print("Port Settings detected")
						currSetting = item.data(0, QtCore.Qt.UserRole)
						print("#")
						print("#PORT")
						if (currSetting.getName() != 'Lumped Port'):    # !!!!!!!!!!!!!!!!!!!!! NEED TO CHECK IF REALLY THIS CONDITION IS GOOD
							print("#name: " + currSetting.getName())
							print("#type: " + currSetting.getType())

							portName = "port_" + str(100*m+k)
							genScript += "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
							genScript += "% PORT\n"
							genScript += "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"

							objs = FreeCAD.ActiveDocument.Objects

							for k in range(item.childCount()):
								childName = item.child(k).text(0)
								print("##Children:")
								print("\t" + childName)
								freecadObjects = [i for i in objs if (i.Label) == childName] 

								#print(freecadObjects)
								for obj in freecadObjects:
									bbCoords = obj.Shape.BoundBox

									print('\t--> Xlength: ' + str(bbCoords.XLength))
									print('\t--> Ylength: ' + str(bbCoords.YLength))
									print('\t--> Zlength: ' + str(bbCoords.ZLength))
									print('\t--> XMin: ' + str(bbCoords.XMin) + " XMax: " + str(bbCoords.XMax))
									print('\t--> YMin: ' + str(bbCoords.YMin) + " YMax: " + str(bbCoords.YMax))
									print('\t--> ZMin: ' + str(bbCoords.ZMin) + " ZMax: " + str(bbCoords.ZMax))

									start = "[" +  str(bbCoords.XMin) + ", " + str(bbCoords.YMin)  + ", " + str(bbCoords.ZMin)  + "]"
									stop = "[" +  str(bbCoords.XMax) + ", " + str(bbCoords.YMax)  + ", " + str(bbCoords.ZMax)  + "]"

									rotX = obj.Placement.Rotation.Axis.x
									rotY = obj.Placement.Rotation.Axis.y
									rotZ = obj.Placement.Rotation.Axis.z
									print("#obj axis: [" + str(rotX) + " " + str(rotY) + " " + str(rotZ) + "]")

									#
									# PORT openEMS GENERATION INTO VARIABLE
									#
									if (currSetting.getType() == 'lumped'):
										genScript += "%% lumped port\n"
										# DECISION NEEDED about field direction NEED TO BE DONE BASED ON SOME VARIABLES!
										# value 50ohm is resistance, NEED BE IN GUI
										genScript += "[CSX port] = AddLumpedPort(CSX, 5 ,1 , 50, " + start + ", " + stop + ", [" + str(rotX) + " " + str(rotY) + " " + str(rotZ) + "], true);"
										genScript += "\n"
										pass
									elif (currSetting.getType() == 'microstrip'):
										genScript += "%% MICROSTRIP PORT\n"
										# adding microstrip openEMS code line										
										# DECISION NEEDED about field direction NEED TO BE DONE BASED ON SOME VARIABLES!
										genScript += "%% AddMSLPort(CSX, 5 ,1 , 'microstrip', p1.stop, p1.start,'x', [0 0 sourceEz], 'ExcitePort',true, 'Feed_R',p1.R);"
										genScript += "\n"
										pass
									elif (currSetting.getType() == 'circular waveguide'):
										# adding openEMS code line
										genScript += "%% circular port openEMS code should be here\n"
										# DECISION NEEDED about field direction NEED TO BE DONE BASED ON SOME VARIABLES!
										pass
									elif (currSetting.getType() == 'rectangular waveguide'):
										# adding openEMS code line
										genScript += "%% rectangular port openEMS code should be here\n"
										# DECISION NEEDED about field direction NEED TO BE DONE BASED ON SOME VARIABLES!
										pass

							portList.append(portName)

							pass
						else:
							print("#Excitation Default")
							print("---")
							pass
						pass


					#
					#	GRID SETTINGS
					#   _____ _____  _____ _____                                    _           _                 _      
					#  / ____|  __ \|_   _|  __ \                                  | |         | |               | |     
					# | |  __| |__) | | | | |  | |   __ _  ___ _ __   ___ _ __ __ _| |_ ___  __| |   ___ ___   __| | ___ 
					# | | |_ |  _  /  | | | |  | |  / _` |/ _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |  / __/ _ \ / _` |/ _ \
					# | |__| | | \ \ _| |_| |__| | | (_| |  __/ | | |  __/ | | (_| | ||  __/ (_| | | (_| (_) | (_| |  __/
					#  \_____|_|  \_\_____|_____/   \__, |\___|_| |_|\___|_|  \__,_|\__\___|\__,_|  \___\___/ \__,_|\___|
					#                                __/ |                                                               
					#                               |___/                                                                
					#
					elif (itemData.__class__.__name__ is "GridSettingsItem"):
						print("Grid Settings detected")
						currentObjects = App.ActiveDocument.Objects						
						if (str(item.parent().text(0)) == "Grid"):
							print("Current item is GRID setting")
							currSetting = item.data(0, QtCore.Qt.UserRole)

							#
							# OCTAVE SCRIPT GOES HERE...
							#
							print("#")
							print("#GRID " + currSetting.getType())
							print("#name " + currSetting.getName())
							print("#")
							if (currSetting.getType() == "Fixed Count"):
								print("#--> x: " + str(currSetting.getXYZ()['x']))
								print("#--> y: " + str(currSetting.getXYZ()['y']))
								print("#--> z: " + str(currSetting.getXYZ()['z']))
							if (currSetting.getType() == "Fixed Distance"):
								print("#--> x: " + str(currSetting.getXYZ()['x']))
								print("#--> y: " + str(currSetting.getXYZ()['y']))
								print("#--> z: " + str(currSetting.getXYZ()['z']))
								print("#")
								print("#--> units: " + str(currSetting.getXYZ()['units']))
							if (currSetting.getType() == "User Defined"):
								print("#--> userDefined: " + str(currSetting.getXYZ()))
							print("#")

							objs = FreeCAD.ActiveDocument.Objects
							objsExport = []

							#item = current GRID ITEM
							for k in range(item.childCount()):
								childName = item.child(k).text(0)
								print("##Children:")
								print("\t" + childName)
								freecadObjects = [i for i in objs if (i.Label) == childName] 

								#print(freecadObjects)
								for obj in freecadObjects:
									# obj = FreeCAD Object class

									#print('\t--> ' + str(dir(obj.Placement.Base)))
									#print('\t--> x: ' + str(obj.Placement.Base.x))
									#print('\t--> y: ' + str(obj.Placement.Base.y))
									#print('\t--> z: ' + str(obj.Placement.Base.z))

									#BOUNDING BOX
									bbCoords = obj.Shape.BoundBox
									#print(type(bbCoords))
									#print(str(dir(bbCoords)))
									print('\t--> Xlength: ' + str(bbCoords.XLength))
									print('\t--> Ylength: ' + str(bbCoords.YLength))
									print('\t--> Zlength: ' + str(bbCoords.ZLength))
									print('\t--> XMin: ' + str(bbCoords.XMin) + " XMax: " + str(bbCoords.XMax))
									print('\t--> YMin: ' + str(bbCoords.YMin) + " YMax: " + str(bbCoords.YMax))
									print('\t--> ZMin: ' + str(bbCoords.ZMin) + " ZMax: " + str(bbCoords.ZMax))

									#
									# GRID openEMS GENERATION INTO VARIABLE
									#
									genScript += "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
									genScript += "% MESH\n"
									genScript += "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n"
									if (currSetting.getType() == 'Fixed Distance'):
										genScript += "unit = " + currSetting.getUnitAsScriptLine() + "; % all length in mm\n"
										genScript += "mesh.x = [(" + str(bbCoords.XMin) + ":" + str(currSetting.getXYZ()['x']) + ":" + str(bbCoords.XMax) + ")];\n"
										genScript += "mesh.y = [(" + str(bbCoords.YMin) + ":" + str(currSetting.getXYZ()['y']) + ":" + str(bbCoords.YMax) + ")];\n"
										genScript += "mesh.z = [(" + str(bbCoords.ZMin) + ":" + str(currSetting.getXYZ()['z']) + ":" + str(bbCoords.ZMax) + ")];\n"
										genScript += "CSX = DefineRectGrid(CSX, unit, mesh);\n"
										pass
									elif (currSetting.getType() == 'Fixed Count'):
										genScript += "mesh.x = [linspace(" + str(bbCoords.XMin) + "," + str(bbCoords.XMax) + "," + str(currSetting.getXYZ()['x']) + ")];\n"
										genScript += "mesh.y = [linspace(" + str(bbCoords.YMin) + "," + str(bbCoords.YMax) + "," + str(currSetting.getXYZ()['y']) + ")];\n"
										genScript += "mesh.z = [linspace(" + str(bbCoords.ZMin) + "," + str(bbCoords.XMax) + "," + str(currSetting.getXYZ()['z']) + ")];\n"
										genScript += "CSX = DefineRectGrid(CSX, unit, mesh);\n"
										pass
									elif (currSetting.getType() == 'User Defined'):
										genScript += "unit = " + currSetting.getUnitAsScriptLine() + "; % all length in mm\n"
										genScript += "mesh = " + currSetting.getXYZ() + ";\n"
										genScript += "CSX = DefineRectGrid(CSX, unit, mesh);\n"
										pass

									"""
									genScript += "\n"
									genScript += "mesh = AddPML( mesh, [8 8 8 8 8 8] ); % add equidistant cells (air around the structure)\n"
									genScript += "\n"
									genScript += "%add grid lines for thin routes LuboJ.\n"
									genScript += "dGrid = 0.007;\n"
									genScript += "\n"
									genScript += "% GRID\n"
									genScript += "CSX = DefineRectGrid( CSX, unit, mesh );\n"
									genScript += "\n"
									"""

									#ADD PART TO LIST TO EXPORT AS .stl
									partToExport = FreeCAD.ActiveDocument.getObject(obj.Name)
									objsExport.append(partToExport)
									print(partToExport)

							Mesh.export(objsExport,u"C:/TEMP/__gen_experiemnt_1.stl")

							pass

					#
					# MATERIALS
					#  __  __       _______ ______ _____  _____          _                                        _           _                 _      
					# |  \/  |   /\|__   __|  ____|  __ \|_   _|   /\   | |                                      | |         | |               | |     
					# | \  / |  /  \  | |  | |__  | |__) | | |    /  \  | |        __ _  ___ _ __   ___ _ __ __ _| |_ ___  __| |   ___ ___   __| | ___ 
					# | |\/| | / /\ \ | |  |  __| |  _  /  | |   / /\ \ | |       / _` |/ _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |  / __/ _ \ / _` |/ _ \
					# | |  | |/ ____ \| |  | |____| | \ \ _| |_ / ____ \| |____  | (_| |  __/ | | |  __/ | | (_| | ||  __/ (_| | | (_| (_) | (_| |  __/
					# |_|  |_/_/    \_\_|  |______|_|  \_\_____/_/    \_\______|  \__, |\___|_| |_|\___|_|  \__,_|\__\___|\__,_|  \___\___/ \__,_|\___|
					#                                                              __/ |                                                               
					#                                                             |___/                                                               					#                                                                                                                                                                                                                                         
					elif (itemData.__class__.__name__ is "MaterialSettingsItem"):
						currSetting = item.data(0, QtCore.Qt.UserRole)
						print(currSetting)
						if (currSetting.getName() != 'Material Default'):
							print("#")
							print("#MATERIAL")
							print("#name: " + currSetting.getName())
							print("#epsilon, mue, kappa, sigma")
							print("#" + str(currSetting.constants['epsilon']) + ", " + str(currSetting.constants['mue']) + ", " + str(currSetting.constants['kappa']) + ", " + str(currSetting.constants['sigma']))

							#
							# GRID openEMS GENERATION INTO VARIABLE
							#
							objs = FreeCAD.ActiveDocument.Objects
							objsExport = []

							genScript += "CSX = AddMaterial( CSX, '" + currSetting.getName() + "' );\n"
							genScript += "CSX = SetMaterialProperty( CSX, 'MaterialName', 'Epsilon', " + str(currSetting.constants['epsilon']) + ", 'Mue', " + str(currSetting.constants['mue']) + ", 'Kappa', " + str(currSetting.constants['kappa']) + ", 'Sigma', " + str(currSetting.constants['sigma']) + ");\n"
							#item = current GRID ITEM
							for k in range(item.childCount()):
								childName = item.child(k).text(0)
								print("##Children:")
								print("\t" + childName)
								freecadObjects = [i for i in objs if (i.Label) == childName] 

								materialName = "metal"
								partFileName = "somePartName"
								# THE NUBER IN IMPORTSTL WILL BE PROBABLY PRIORITY NUMBER
								genScript += "CSX = ImportSTL(CSX, '" + currSetting.getName() + "',10, [currDir '\\model\\" + childName + ".stl'],'Transform',{'Scale', 1});\n"

								pass
						else:
							print("#Material Default")
							print("---")

						pass

					#
					#	 FreeCAD item detection everywhere in Main Tree!!! need to get rid this, now it's tolerated during development!
					#
					#  ______              _____          _____    _ _                   _                    
					# |  ____|            / ____|   /\   |  __ \  (_) |                 | |                   
					# | |__ _ __ ___  ___| |       /  \  | |  | |  _| |_ ___ _ __ ___   | |_ _   _ _ __   ___ 
					# |  __| '__/ _ \/ _ \ |      / /\ \ | |  | | | | __/ _ \ '_ ` _ \  | __| | | | '_ \ / _ \
					# | |  | | |  __/  __/ |____ / ____ \| |__| | | | ||  __/ | | | | | | |_| |_| | |_) |  __/
					# |_|  |_|  \___|\___|\_____/_/    \_\_____/  |_|\__\___|_| |_| |_|  \__|\__, | .__/ \___|
					#                                                                         __/ | |         
					#                                                                        |___/|_|        
					#
					elif (itemData.__class__.__name__ is "FreeCADSettingsItem"):
						print("FreeCAD Settings detected")

						#
						#	GET PARENT NODE DATATYPE
						#
						print("#")
						print("#FREECAD OBJ.")
						if (str(item.parent().text(0)) == "Grid"):
							print("name: Grid Default")
							print("type: FreeCADSettingsItem")
							pass
						elif (str(item.parent().text(0)) == "Ports"):
							print("name: Port Default")
							print("type: FreeCADSettingsItem")
							pass
						elif (str(item.parent().text(0)) == "Excitation"):
							print("name: Excitation Default")
							print("type: FreeCADSettingsItem")
							pass
						elif (str(item.parent().text(0)) == "Materials"):
							print("name: Material Default")
							print("type: FreeCADSettingsItem")
							pass
						else:
							print("Parent of FreeCADSettingItem UNKNOWN")
							pass

					else:
						print("unknown: " + itemData.__class__.__name__)
						pass
				else:
					print("object not defined")
					pass
				print("\n")

		print("======================== REPORT END ========================\n")

		#
		# WRITE GENERATED SCRIPT INTO FILE
		#
		f = open("C:\\temp\\_gen_openEMS.m", "w")
		f.write(genScript)
		f.close()

		return

	def show(self):
		self.form.show()

	def onMoveLeft(self):
		print("Button << clicked.")

	def onMoveRight(self):
		print("Button >> clicked.")
		leftItem = self.form.objectAssignmentLeftTreeWidget.selectedItems()[0].clone()
		rightItem = self.form.objectAssignmentRightTreeWidget.selectedItems()[0]
		print(leftItem.text(0))
		print(rightItem.text(0))

		rightItem.addChild(leftItem)

	def displayMessage(self, msgText):
		msgBox = QtGui.QMessageBox()
		msgBox.setText(msgText)
		msgBox.exec()

	def checkTreeWidgetForDupliciyName(self,refTreeWidget, itemName):
		isDuplicityName = False
		iterator = QtGui.QTreeWidgetItemIterator(refTreeWidget, QtGui.QTreeWidgetItemIterator.All)
		while iterator.value():
			item = iterator.value()
			if item.text(0) == itemName:
				isDuplicityName = True
				self.displayMessage("Please change name, item with this name already exists.")
			iterator +=1
		return isDuplicityName


	# GRID SETTINGS
	#   _____ _____  _____ _____     _____ ______ _______ _______ _____ _   _  _____  _____ 
	#  / ____|  __ \|_   _|  __ \   / ____|  ____|__   __|__   __|_   _| \ | |/ ____|/ ____|
	# | |  __| |__) | | | | |  | | | (___ | |__     | |     | |    | | |  \| | |  __| (___  
	# | | |_ |  _  /  | | | |  | |  \___ \|  __|    | |     | |    | | | . ` | | |_ |\___ \ 
	# | |__| | | \ \ _| |_| |__| |  ____) | |____   | |     | |   _| |_| |\  | |__| |____) |
	#  \_____|_|  \_\_____|_____/  |_____/|______|  |_|     |_|  |_____|_| \_|\_____|_____/ 
	#
	def fixedCountRadioButtonClicked(self):
		self.form.userDefinedGridLinesTextInput.setEnabled(False)

	def fixedDistanceRadioButtonClicked(self):
		self.form.userDefinedGridLinesTextInput.setEnabled(False)

	def userDefinedRadioButtonClicked(self):
		self.form.userDefinedGridLinesTextInput.setEnabled(True)

	def gridSettingsAddButtonClicked(self):
		name = self.form.gridSettingsNameInput.text()
		gridType = ""
		gridX = 0
		gridY = 0
		gridZ = 0
		gridUnits = ""
		gridUserDefined = ""

		gridItem = GridSettingsItem()
		gridItem.name = name

		if (self.form.fixedCountRadioButton.isChecked()):
			gridType = "Fixed Count"
			gridX = self.form.fixedCountXNumberInput.value()
			gridY = self.form.fixedCountYNumberInput.value()
			gridZ = self.form.fixedCountZNumberInput.value()

			gridItem.type = gridType
			gridItem.fixedCount['x'] = gridX
			gridItem.fixedCount['y'] = gridY
			gridItem.fixedCount['z'] = gridZ

			print("---> Saved GridSetting ")
			print(str(gridX) + " " + str(gridY) + " " + str(gridZ))

		if (self.form.fixedDistanceRadioButton.isChecked()):
			gridType = "Fixed Distance"
			gridX = self.form.fixedDistanceXNumberInput.value()
			gridY = self.form.fixedDistanceYNumberInput.value()
			gridZ = self.form.fixedDistanceZNumberInput.value()
			gridUnits = self.form.fixedDistanceUnitsInput.currentText()

			gridItem.type = gridType
			gridItem.fixedDistance['x'] = gridX
			gridItem.fixedDistance['y'] = gridY
			gridItem.fixedDistance['z'] = gridZ
			gridItem.fixedDistance['units'] = gridUnits

		if (self.form.userDefinedRadioButton.isChecked()):
			gridType = "User Defined"
			gridUserDefined = self.form.userDefinedGridLinesTextInput.toPlainText()

			gridItem.type = gridType
			gridItem.userDefined = gridUserDefined

		"""
		self.displayMessage(						\
			"Grid Settings \"" + name + "\":\n"	\
			"\n"									\
			"type: " + str(gridType) + "\n" +	\
			"X: " + str(gridX) + "\n" +			\
			"Y: " + str(gridY) + "\n" +			\
			"Z: " + str(gridZ) + "\n" +			\
			"units: " + gridUnits + "\n"			\
			"userDef: " + gridUserDefined		\
		)
		"""
		
		# display message box with current settings for grid item
		#self.displayMessage(gridItem.serializeToString())		

		#check for duplicity in names if there is some warning message displayed
		isDuplicityName = self.checkTreeWidgetForDupliciyName(self.form.gridSettingsTreeView, gridItem.name)

		#if everything is OK, item is added into tree
		if (not isDuplicityName):
			treeGridItem = QtGui.QTreeWidgetItem([gridItem.name])
			treeGridItem.setIcon(0, QtGui.QIcon(".\\img\\grid.png"))
			treeGridItem.setData(0, QtCore.Qt.UserRole, gridItem)
	
			self.form.gridSettingsTreeView.insertTopLevelItem(0, treeGridItem)

			# MAIN TREE WIDGET, add into ObjectAssignment
			gridGroup = self.form.objectAssignmentRightTreeWidget.findItems("Grid", QtCore.Qt.MatchExactly)
			gridGroup[0].addChild(treeGridItem.clone())

	def gridSettingsRemoveButtonClicked(self):
		#selectedItem = self.form.gridSettingsTreeView.selectedItems()[0].data(0, QtCore.Qt.UserRole)
		#self.displayMessage(selectedItem.serializeToString())

		selectedItem = self.form.gridSettingsTreeView.selectedItems()[0]
		print("Selected port name: " + selectedItem.text(0))

		gridGroupWidgetItems = self.form.objectAssignmentRightTreeWidget.findItems(selectedItem.text(0), QtCore.Qt.MatchExactly|QtCore.Qt.MatchFlag.MatchRecursive)
		gridGroupItem = None
		for item in gridGroupWidgetItems:
			if (item.parent().text(0) == "Grid"):
				gridGroupItem = item
		print("Currently removing port item: " + gridGroupItem.text(0))

		self.form.portSettingsTreeView.invisibleRootItem().removeChild(selectedItem)
		gridGroupItem.parent().removeChild(gridGroupItem)

		return

	#
	# MATERIAL SETTINGS
	#  __  __       _______ ______ _____  _____          _         _____ ______ _______ _______ _____ _   _  _____  _____ 
	# |  \/  |   /\|__   __|  ____|  __ \|_   _|   /\   | |       / ____|  ____|__   __|__   __|_   _| \ | |/ ____|/ ____|
	# | \  / |  /  \  | |  | |__  | |__) | | |    /  \  | |      | (___ | |__     | |     | |    | | |  \| | |  __| (___  
	# | |\/| | / /\ \ | |  |  __| |  _  /  | |   / /\ \ | |       \___ \|  __|    | |     | |    | | | . ` | | |_ |\___ \ 
	# | |  | |/ ____ \| |  | |____| | \ \ _| |_ / ____ \| |____   ____) | |____   | |     | |   _| |_| |\  | |__| |____) |
	# |_|  |_/_/    \_\_|  |______|_|  \_\_____/_/    \_\______| |_____/|______|  |_|     |_|  |_____|_| \_|\_____|_____/ 
	#                                                                                                                     
	def materialSettingsAddButtonClicked(self):
		name = self.form.materialSettingsNameInput.text()
		epsilon = self.form.materialEpsilonNumberInput.value()
		mue = self.form.materialMueNumberInput.value()
		kappa = self.form.materialKappaNumberInput.value()
		sigma = self.form.materialSigmaNumberInput.value()
		
		materialItem = MaterialSettingsItem()
		materialItem.name = name
		materialItem.constants['epsilon'] = epsilon
		materialItem.constants['mue'] = mue
		materialItem.constants['kappa'] = kappa
		materialItem.constants['sigma'] = sigma	

		# display message box with current material settings to be added
		#self.displayMessage(materialItem.serializeToString())

		#check for duplicity in names if there is some warning message displayed
		isDuplicityName = self.checkTreeWidgetForDupliciyName(self.form.materialSettingsTreeView, materialItem.name)

		if (not isDuplicityName):
			treeMaterialItem = QtGui.QTreeWidgetItem([materialItem.name])
			treeMaterialItem.setIcon(0, QtGui.QIcon(".\\img\\material.png"))
			treeMaterialItem.setData(0, QtCore.Qt.UserRole, materialItem)
	
			self.form.materialSettingsTreeView.insertTopLevelItem(0, treeMaterialItem)

			#			
			# MAIN TREE WIDGET, add into ObjectAssignment
			#
			materialGroup = self.form.objectAssignmentRightTreeWidget.findItems("Materials", QtCore.Qt.MatchExactly)
			materialGroup[0].addChild(treeMaterialItem.clone())

	def materialSettingsRemoveButtonClicked(self):
		selectedItem = self.form.materialSettingsTreeView.selectedItems()[0]
		print("Selected material name: " + selectedItem.text(0))

		materialGroupWidgetItems = self.form.objectAssignmentRightTreeWidget.findItems(selectedItem.text(0), QtCore.Qt.MatchExactly|QtCore.Qt.MatchFlag.MatchRecursive)
		materialGroupItem = None
		for item in materialGroupWidgetItems:
			if (item.parent().text(0) == "Materials"):
				materialGroupItem = item
		print("Currently removing material item: " + materialGroupItem.text(0))

		self.form.materialSettingsTreeView.invisibleRootItem().removeChild(selectedItem)
		materialGroupItem.parent().removeChild(materialGroupItem)

		return

	# EXCITATION SETTINGS
	#  ________   _______ _____ _______    _______ _____ ____  _   _    _____ ______ _______ _______ _____ _   _  _____  _____ 
	# |  ____\ \ / / ____|_   _|__   __|/\|__   __|_   _/ __ \| \ | |  / ____|  ____|__   __|__   __|_   _| \ | |/ ____|/ ____|
	# | |__   \ V / |      | |    | |  /  \  | |    | || |  | |  \| | | (___ | |__     | |     | |    | | |  \| | |  __| (___  
	# |  __|   > <| |      | |    | | / /\ \ | |    | || |  | | . ` |  \___ \|  __|    | |     | |    | | | . ` | | |_ |\___ \ 
	# | |____ / . \ |____ _| |_   | |/ ____ \| |   _| || |__| | |\  |  ____) | |____   | |     | |   _| |_| |\  | |__| |____) |
	# |______/_/ \_\_____|_____|  |_/_/    \_\_|  |_____\____/|_| \_| |_____/|______|  |_|     |_|  |_____|_| \_|\_____|_____/ 
	#                                                                                                                          
	def excitationSettingsAddButtonClicked(self):
		name = self.form.excitationSettingsNameInput.text()

		excitationItem = ExcitationSettingsItem()
		excitationItem.name = name
		excitationItem.units = self.form.excitationUnitsNumberInput.currentText()

		if (self.form.sinusodialExcitationRadioButton.isChecked()):
			excitationItem.type = 'sinusodial'
			excitationItem.sinusodial['fc'] = self.form.sinusodialExcitationFcNumberInput.value()
		if (self.form.gaussianExcitationRadioButton.isChecked()):
			excitationItem.type = 'gaussian'
			excitationItem.gaussian['fc'] = self.form.gaussianExcitationFcNumberInput.value()
			excitationItem.gaussian['f0'] = self.form.gaussianExcitationF0NumberInput.value()
		if (self.form.customExcitationRadioButton.isChecked()):
			excitationItem.type = 'custom'
			excitationItem.custom['functionStr'] = self.form.customExcitationTextInput.text()

		#check for duplicity in names if there is some warning message displayed
		isDuplicityName = self.checkTreeWidgetForDupliciyName(self.form.excitationSettingsTreeView, excitationItem.name)

		if (not isDuplicityName):
			treeExcitationItem = QtGui.QTreeWidgetItem([excitationItem.name])
			treeExcitationItem.setIcon(0, QtGui.QIcon(".\\img\\excitation.png"))
			treeExcitationItem.setData(0, QtCore.Qt.UserRole, excitationItem)
	
			#add item into excitation list
			self.form.excitationSettingsTreeView.insertTopLevelItem(0, treeExcitationItem)

			#adding excitation also into OBJCET ASSIGNMENT WINDOW
			excitationGroup = self.form.objectAssignmentRightTreeWidget.findItems("Excitation", QtCore.Qt.MatchExactly)
			excitationGroup[0].addChild(treeExcitationItem.clone())

	def excitationSettingsRemoveButtonClicked(self):
		selectedItem = self.form.excitationSettingsTreeView.selectedItems()[0]
		print("Selected port name: " + selectedItem.text(0))

		excitationGroupWidgetItems = self.form.objectAssignmentRightTreeWidget.findItems(selectedItem.text(0), QtCore.Qt.MatchExactly|QtCore.Qt.MatchFlag.MatchRecursive)
		excitationGroupItem = None
		for item in excitationGroupWidgetItems:
			if (item.parent().text(0) == "Excitation"):
				excitationGroupItem = item
		print("Currently removing port item: " + excitationGroupItem.text(0))

		self.form.excitationSettingsTreeView.invisibleRootItem().removeChild(selectedItem)
		excitationGroupItem.parent().removeChild(excitationGroupItem)

		return

	# PORT SETTINGS
	#  _____   ____  _____ _______    _____ ______ _______ _______ _____ _   _  _____  _____ 
	# |  __ \ / __ \|  __ \__   __|  / ____|  ____|__   __|__   __|_   _| \ | |/ ____|/ ____|
	# | |__) | |  | | |__) | | |    | (___ | |__     | |     | |    | | |  \| | |  __| (___  
	# |  ___/| |  | |  _  /  | |     \___ \|  __|    | |     | |    | | | . ` | | |_ |\___ \ 
	# | |    | |__| | | \ \  | |     ____) | |____   | |     | |   _| |_| |\  | |__| |____) |
	# |_|     \____/|_|  \_\ |_|    |_____/|______|  |_|     |_|  |_____|_| \_|\_____|_____/ 
	#                                                                                        
	def portSettingsAddButtonClicked(self):
		name = self.form.portSettingsNameInput.text()

		portItem = PortSettingsItem()
		portItem.name = name

		if (self.form.lumpedPortRadioButton.isChecked()):
			portItem.type = "lumped"
		if (self.form.microstripPortRadioButton.isChecked()):
			portItem.type = "microstrip"
		if (self.form.circularWaveguidePortRadioButton.isChecked()):
			portItem.type = "circular waveguide"
		if (self.form.rectangularWaveguidePortRadioButton.isChecked()):
			portItem.type = "rectangular waveguide"

		#check for duplicity in names if there is some warning message displayed
		isDuplicityName = self.checkTreeWidgetForDupliciyName(self.form.portSettingsTreeView, portItem.name)

		if (not isDuplicityName):
			treePortItem = QtGui.QTreeWidgetItem([portItem.name])
			treePortItem.setIcon(0, QtGui.QIcon(".\\img\\port.png"))
			treePortItem.setData(0, QtCore.Qt.UserRole, portItem)
	
			self.form.portSettingsTreeView.insertTopLevelItem(0, treePortItem)

			# MAIN TREE WIDGET, add into ObjectAssignment
			portGroup = self.form.objectAssignmentRightTreeWidget.findItems("Ports", QtCore.Qt.MatchExactly)
			portGroup[0].addChild(treePortItem.clone())

		return

	def portSettingsRemoveButtonClicked(self):
		selectedItem = self.form.portSettingsTreeView.selectedItems()[0]
		print("Selected port name: " + selectedItem.text(0))

		portGroupWidgetItems = self.form.objectAssignmentRightTreeWidget.findItems(selectedItem.text(0), QtCore.Qt.MatchExactly|QtCore.Qt.MatchFlag.MatchRecursive)
		portGroupItem = None
		for item in portGroupWidgetItems:
			if (item.parent().text(0) == "Ports"):
				portGroupItem = item
		print("Currently removing port item: " + portGroupItem.text(0))

		self.form.portSettingsTreeView.invisibleRootItem().removeChild(selectedItem)
		portGroupItem.parent().removeChild(portGroupItem)

		return

	def materialTreeWidgetItemChanged(self, current, previous):
		print("Material item changed.")
		currSetting = self.form.materialSettingsTreeView.currentItem().data(0, QtCore.Qt.UserRole)
		prevSetting = previous.data(0, QtCore.Qt.UserRole)
		print(currSetting.constants['epsilon'])
		print(prevSetting.constants['epsilon'])
		self.form.materialSettingsNameInput.setText(currSetting.name)
		self.form.materialEpsilonNumberInput.setValue(int(currSetting.constants['epsilon']))
		self.form.materialMueNumberInput.setValue(currSetting.constants['mue'])
		self.form.materialKappaNumberInput.setValue(currSetting.constants['kappa'])
		self.form.materialSigmaNumberInput.setValue(currSetting.constants['sigma'])
		return

	####################################################################################################################################################################
	# GUI SAVE/LOAD buttons
	####################################################################################################################################################################
	def saveCurrentSettingsButtonClicked(self):
		print("Saving current values into file.")
		programname = os.path.basename(__file__)
		programbase, ext = os.path.splitext(programname)  # extract basename and ext from filename
		settings = QtCore.QSettings("company", programbase)    
		#settings.setValue("geometry", self.saveGeometry())  # save window geometry
		#settings.setValue("state", self.saveState(UI_VERSION))   # save settings (UI_VERSION is a constant you should increment when your UI changes significantly to prevent attempts to restore an invalid state.)
		
		# save ui values, so they can be restored next time
		"""
		settings.setValue("lineEditUser", self.lineEditUser.text());
		settings.setValue("lineEditPass", self.lineEditPass.text());
		
		settings.setValue("checkBoxReplace", self.checkBoxReplace.checkState());
		settings.setValue("checkBoxFirst", self.checkBoxFirst.checkState());
		
		settings.setValue("radioButton1", self.radioButton1.isChecked());
		sys.exit()  # prevents second call
		"""

		# I just need to save items in each tab, no current text fields values or checkboxes
		# state, so here will be just saving items as JSON objects into file
		
		#
		# NEW CODE GOES HERE.
		#

		return

	def loadCurrentSettingsButtonClicked(self):
		print("Load current values from file.")
		return

####################################################################################################################################################################
# End of PANEL definition
####################################################################################################################################################################
 
panel = BoxTaskPanel()
#FreeCADGui.Control.showDialog(panel)
panel.show()
